# -*- coding: utf-8 -*-
"""Write a Pipeline Supervise Learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1csiosywtPjb-G0R4s1F7gLlwID_UX_23

## Decision Tree
"""

from sklearn import datasets
from sklearn import tree
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

iris = datasets.load_iris()

X = iris.data
y = iris.target


X_train, X_test, y_train, y_test = train_test_split (X, y, test_size = .5)
                                                     
my_classifier =  tree.DecisionTreeClassifier()

my_classifier.fit(X_train, y_train)

predictions = my_classifier.predict(X_test)


print(accuracy_score(y_test,predictions ))

"""## KNN"""

from sklearn import datasets
from sklearn import tree
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.neighbors import KNeighborsClassifier

iris = datasets.load_iris()

X = iris.data
y = iris.target


X_train, X_test, y_train, y_test = train_test_split (X, y, test_size = .5)
                                                     
my_classifier =  KNeighborsClassifier()

my_classifier.fit(X_train, y_train)

predictions = my_classifier.predict(X_test)


print(accuracy_score(y_test,predictions ))

"""## Write Own Classifier"""

import random
from sklearn import datasets
from sklearn import tree
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

class ScrapyKNN():
  def fit(self, X_train, y_train):
      self.X_train = X_train
      self.y_train = y_train
      
  def predict(self, X_test):
      predictions = []
      for row in X_test:
          label = random.choice(self.y_train)
          predictions.append(label)
      return predictions

iris = datasets.load_iris()

X = iris.data
y = iris.target


# X_train, X_test, y_train, y_test = train_test_split (X, y, test_size = .5)
                                                     
my_classifier =  ScrapyKNN()

my_classifier.fit(X_train, y_train)

predictions = my_classifier.predict(X_test)


print(accuracy_score(y_test,predictions ))



"""### Accuracy is so poor, lets fixed bug"""

from scipy.spatial import distance
from sklearn import datasets
from sklearn import tree
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

def euc(a,b):
  return distance.euclidean(a,b)
  

class ScrapyKNN():
  def fit(self, X_train, y_train):
      self.X_train = X_train
      self.y_train = y_train
      
  def predict(self, X_test):
      predictions = []
      for row in X_test:
          label = self.closest(row)
          predictions.append(label)
      return predictions
  def closest(self, row):
    best_dist =  euc(row, self.X_train[0])
    best_index = 0
    for i in range(1, len(self.X_train)):
      dist = euc(row, self.X_train[i])
      if dist < best_dist:
        best_dist =  dist
        best_index = i
    return self.y_train[best_index]

iris = datasets.load_iris()

X = iris.data
y = iris.target


# X_train, X_test, y_train, y_test = train_test_split (X, y, test_size = .5)
                                                     
my_classifier =  ScrapyKNN()

my_classifier.fit(X_train, y_train)

predictions = my_classifier.predict(X_test)


print(accuracy_score(y_test,predictions ))